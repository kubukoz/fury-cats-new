// auto-generated boilerplate by /project/Boilerplate.scala
package cats

/**
 * @groupprio Ungrouped 0
 *
 * @groupname ParMapArity parMap arity
 * @groupdesc ParMapArity Higher-arity parMap methods
 * @groupprio ParMapArity 999
 */
trait ParallelArityFunctions {
  /** @group ParMapArity */
  def parMap2[M[_], A0, A1, Z](m0:M[A0], m1:M[A1])(f: (A0, A1) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, m1)) { case (a0, a1) => f(a0, a1) }
  /** @group ParMapArity */
  def parMap3[M[_], A0, A1, A2, Z](m0:M[A0], m1:M[A1], m2:M[A2])(f: (A0, A1, A2) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, m2))) { case (a0, (a1, a2)) => f(a0, a1, a2) }
  /** @group ParMapArity */
  def parMap4[M[_], A0, A1, A2, A3, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3])(f: (A0, A1, A2, A3) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, m3)))) { case (a0, (a1, (a2, a3))) => f(a0, a1, a2, a3) }
  /** @group ParMapArity */
  def parMap5[M[_], A0, A1, A2, A3, A4, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4])(f: (A0, A1, A2, A3, A4) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, m4))))) { case (a0, (a1, (a2, (a3, a4)))) => f(a0, a1, a2, a3, a4) }
  /** @group ParMapArity */
  def parMap6[M[_], A0, A1, A2, A3, A4, A5, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5])(f: (A0, A1, A2, A3, A4, A5) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, m5)))))) { case (a0, (a1, (a2, (a3, (a4, a5))))) => f(a0, a1, a2, a3, a4, a5) }
  /** @group ParMapArity */
  def parMap7[M[_], A0, A1, A2, A3, A4, A5, A6, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, m6))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, a6)))))) => f(a0, a1, a2, a3, a4, a5, a6) }
  /** @group ParMapArity */
  def parMap8[M[_], A0, A1, A2, A3, A4, A5, A6, A7, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, m7)))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, a7))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7) }
  /** @group ParMapArity */
  def parMap9[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, m8))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, a8)))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8) }
  /** @group ParMapArity */
  def parMap10[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, m9)))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, a9))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) }
  /** @group ParMapArity */
  def parMap11[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, m10))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, a10)))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) }
  /** @group ParMapArity */
  def parMap12[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, m11)))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, a11))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) }
  /** @group ParMapArity */
  def parMap13[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, m12))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, a12)))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) }
  /** @group ParMapArity */
  def parMap14[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, m13)))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, a13))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) }
  /** @group ParMapArity */
  def parMap15[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, m14))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, a14)))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) }
  /** @group ParMapArity */
  def parMap16[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, m15)))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, a15))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) }
  /** @group ParMapArity */
  def parMap17[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15], m16:M[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, Parallel.parProduct(m15, m16))))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, a16)))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) }
  /** @group ParMapArity */
  def parMap18[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15], m16:M[A16], m17:M[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, Parallel.parProduct(m15, Parallel.parProduct(m16, m17)))))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, (a16, a17))))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) }
  /** @group ParMapArity */
  def parMap19[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15], m16:M[A16], m17:M[A17], m18:M[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, Parallel.parProduct(m15, Parallel.parProduct(m16, Parallel.parProduct(m17, m18))))))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, (a16, (a17, a18)))))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) }
  /** @group ParMapArity */
  def parMap20[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15], m16:M[A16], m17:M[A17], m18:M[A18], m19:M[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, Parallel.parProduct(m15, Parallel.parProduct(m16, Parallel.parProduct(m17, Parallel.parProduct(m18, m19)))))))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, (a16, (a17, (a18, a19))))))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) }
  /** @group ParMapArity */
  def parMap21[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15], m16:M[A16], m17:M[A17], m18:M[A18], m19:M[A19], m20:M[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, Parallel.parProduct(m15, Parallel.parProduct(m16, Parallel.parProduct(m17, Parallel.parProduct(m18, Parallel.parProduct(m19, m20))))))))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, (a16, (a17, (a18, (a19, a20)))))))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) }
  /** @group ParMapArity */
  def parMap22[M[_], A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, Z](m0:M[A0], m1:M[A1], m2:M[A2], m3:M[A3], m4:M[A4], m5:M[A5], m6:M[A6], m7:M[A7], m8:M[A8], m9:M[A9], m10:M[A10], m11:M[A11], m12:M[A12], m13:M[A13], m14:M[A14], m15:M[A15], m16:M[A16], m17:M[A17], m18:M[A18], m19:M[A19], m20:M[A20], m21:M[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z)(implicit p: NonEmptyParallel[M]): M[Z] =
    p.flatMap.map(Parallel.parProduct(m0, Parallel.parProduct(m1, Parallel.parProduct(m2, Parallel.parProduct(m3, Parallel.parProduct(m4, Parallel.parProduct(m5, Parallel.parProduct(m6, Parallel.parProduct(m7, Parallel.parProduct(m8, Parallel.parProduct(m9, Parallel.parProduct(m10, Parallel.parProduct(m11, Parallel.parProduct(m12, Parallel.parProduct(m13, Parallel.parProduct(m14, Parallel.parProduct(m15, Parallel.parProduct(m16, Parallel.parProduct(m17, Parallel.parProduct(m18, Parallel.parProduct(m19, Parallel.parProduct(m20, m21)))))))))))))))))))))) { case (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, (a16, (a17, (a18, (a19, (a20, a21))))))))))))))))))))) => f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21) }
}